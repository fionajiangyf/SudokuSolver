{"ast":null,"code":"var _jsxFileName = \"/Users/Fiona/Desktop/sudoku/src/components/SudokuGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SudokuGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SudokuGrid = () => {\n  _s();\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Function to create an empty Sudoku grid\n  function createEmptyGrid() {\n    return Array.from({\n      length: 9\n    }, () => Array(9).fill(''));\n  }\n\n  // Function to handle user input in cells\n  function handleCellInput(event, row, col) {\n    const value = event.target.value;\n\n    // Allow only numbers 1-9 or an empty string (for deletion)\n    if (/^[1-9]?$/.test(value)) {\n      const newGrid = [...grid];\n      newGrid[row][col] = value;\n      setGrid(newGrid);\n    }\n  }\n\n  // Function to handle difficulty selection\n  function handleDifficulty(difficulty) {\n    // You can implement logic here based on the selected difficulty\n    console.log(`Selected difficulty: ${difficulty}`);\n  }\n\n  // JSX for rendering the Sudoku grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          maxLength: 1,\n          className: \"cell\",\n          value: cell,\n          onChange: event => handleCellInput(event, rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"difficulty-button easy\",\n        onClick: () => handleDifficulty('Easy'),\n        children: \"Easy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"difficulty-button medium\",\n        onClick: () => handleDifficulty('Medium'),\n        children: \"Medium\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"difficulty-button hard\",\n        onClick: () => handleDifficulty('Hard'),\n        children: \"Hard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuGrid, \"kvio6wSdBk5ukJFIGsSDwZiBCDg=\");\n_c = SudokuGrid;\nexport default SudokuGrid;\nvar _c;\n$RefreshReg$(_c, \"SudokuGrid\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SudokuGrid","_s","grid","setGrid","createEmptyGrid","Array","from","length","fill","handleCellInput","event","row","col","value","target","test","newGrid","handleDifficulty","difficulty","console","log","className","children","map","rowIndex","cell","colIndex","type","maxLength","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/Fiona/Desktop/sudoku/src/components/SudokuGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SudokuGrid.css';\n\nconst SudokuGrid = () => {\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Function to create an empty Sudoku grid\n  function createEmptyGrid() {\n    return Array.from({ length: 9 }, () => Array(9).fill(''));\n  }\n\n  // Function to handle user input in cells\n  function handleCellInput(event, row, col) {\n    const value = event.target.value;\n\n    // Allow only numbers 1-9 or an empty string (for deletion)\n    if (/^[1-9]?$/.test(value)) {\n      const newGrid = [...grid];\n      newGrid[row][col] = value;\n      setGrid(newGrid);\n    }\n  }\n\n  // Function to handle difficulty selection\n  function handleDifficulty(difficulty) {\n    // You can implement logic here based on the selected difficulty\n    console.log(`Selected difficulty: ${difficulty}`);\n  }\n\n  // JSX for rendering the Sudoku grid\n  return (\n    <div className=\"sudoku-container\">\n      <div className=\"sudoku-grid\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <input\n                key={colIndex}\n                type=\"text\"\n                maxLength={1}\n                className=\"cell\"\n                value={cell}\n                onChange={(event) => handleCellInput(event, rowIndex, colIndex)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"button-container\">\n        <button className=\"difficulty-button easy\" onClick={() => handleDifficulty('Easy')}>\n          Easy\n        </button>\n        <button className=\"difficulty-button medium\" onClick={() => handleDifficulty('Medium')}>\n          Medium\n        </button>\n        <button className=\"difficulty-button hard\" onClick={() => handleDifficulty('Hard')}>\n          Hard\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SudokuGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}