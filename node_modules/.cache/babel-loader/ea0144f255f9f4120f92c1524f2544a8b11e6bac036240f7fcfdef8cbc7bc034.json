{"ast":null,"code":"import React,{useState}from'react';import'./SudokuGrid.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";let originalPuzzle=[];let currentPuzzle=[];const SudokuGrid=()=>{const[grid,setGrid]=useState(createEmptyGrid());const[solvable,setSolvable]=useState(true);// Function to create an empty Sudoku grid\nfunction createEmptyGrid(){return Array.from({length:9},()=>Array(9).fill(''));}// Function to handle user input in cells\n// Function to handle user input in cells\nfunction handleCellInput(event,row,col){const value=event.target.value;// Allow only numbers 1-9 or an empty string (for deletion)\nif(/^[1-9]?$/.test(value)){const newGrid=[...grid];// Check if the cell is part of the original puzzle\nif(originalPuzzle[row][col]===''){newGrid[row][col]=value;setGrid(newGrid);}}}// Function to handle loading a board from a text file\nasync function loadBoardFromFile(fileContent){const newGrid=createEmptyGrid();// Parse file content and update the grid\nfileContent.split('\\n').forEach((line,rowIndex)=>{line.trim().split('').forEach((char,colIndex)=>{if(char!=='*'){newGrid[rowIndex][colIndex]=char;}});});originalPuzzle=newGrid.map(row=>[...row]);setGrid(newGrid);}// Function to handle difficulty selection\nasync function handleDifficulty(difficulty){// Load the board from the corresponding text file\ntry{const jsonData=await import(\"./\".concat(difficulty,\".json\"));const fileContent=jsonData.text;console.log(fileContent);loadBoardFromFile(fileContent);}catch(error){console.error('Error loading the board:',error);}}// Inside your SudokuGrid component\nasync function handleSolve(){try{currentPuzzle=grid.map(row=>[...row]);const response=await fetch('http://localhost:3000/api/sudoku',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({board:grid})});if(!response.ok){const errorData=await response.json();throw new Error(\"HTTP error! Status: \".concat(response.status,\", Error: \").concat(errorData.error));}const data=await response.json();console.log(data);if(data===null){// Display an alert when the Sudoku board is unsolvable\nsetSolvable(false);const newGrid=createEmptyGrid();originalPuzzle=newGrid.map(row=>[...row]);setGrid(currentPuzzle);}else{const solvedGrid=data.solvedGrid;setSolvable(true);// Update the state with the solved grid received from the backend\nsetGrid(solvedGrid);}}catch(error){// Log other errors to the console\nconsole.error('Error solving Sudoku:',error);}}function handleClear(){const newGrid=createEmptyGrid();originalPuzzle=newGrid.map(row=>[...row]);setGrid(newGrid);}function handleClosePopup(){// Reset solvability state and error message when closing the popup\nsetSolvable(true);handleClear();}// JSX for rendering the Sudoku grid\n// JSX for rendering the Sudoku grid\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"sudoku-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"sudoku-grid\",children:grid===null?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Cannot solve the Sudoku board. Please check your input.\"}),/*#__PURE__*/_jsx(\"button\",{className:\"popup-button\",onClick:handleClosePopup,children:\"Close\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[grid.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(\"input\",{type:\"text\",maxLength:1,className:\"cell\",value:cell,onChange:event=>handleCellInput(event,rowIndex,colIndex)},colIndex))},rowIndex)),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"clear-button\",onClick:()=>handleClear(),children:\"Clear\"}),/*#__PURE__*/_jsx(\"button\",{className:\"difficulty-button easy\",onClick:()=>handleDifficulty('easy'),children:\"Easy\"}),/*#__PURE__*/_jsx(\"button\",{className:\"difficulty-button medium\",onClick:()=>handleDifficulty('medium'),children:\"Medium\"}),/*#__PURE__*/_jsx(\"button\",{className:\"difficulty-button hard\",onClick:()=>handleDifficulty('hard'),children:\"Hard\"}),/*#__PURE__*/_jsx(\"button\",{className:\"solve-button\",onClick:()=>handleSolve(),children:\"Solve\"})]})]})})});};export default SudokuGrid;","map":{"version":3,"names":["React","useState","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","originalPuzzle","currentPuzzle","SudokuGrid","grid","setGrid","createEmptyGrid","solvable","setSolvable","Array","from","length","fill","handleCellInput","event","row","col","value","target","test","newGrid","loadBoardFromFile","fileContent","split","forEach","line","rowIndex","trim","char","colIndex","map","handleDifficulty","difficulty","jsonData","concat","text","console","log","error","handleSolve","response","fetch","method","headers","body","JSON","stringify","board","ok","errorData","json","Error","status","data","solvedGrid","handleClear","handleClosePopup","className","children","onClick","cell","type","maxLength","onChange"],"sources":["/Users/Fiona/Desktop/sudoku/src/components/SudokuGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SudokuGrid.css';\n\n\nlet originalPuzzle = [];\nlet currentPuzzle = [];\nconst SudokuGrid = () => {\n  const [grid, setGrid] = useState(createEmptyGrid());\n  const [solvable, setSolvable] = useState(true);\n\n  // Function to create an empty Sudoku grid\n  function createEmptyGrid() {\n    return Array.from({ length: 9 }, () => Array(9).fill(''));\n  }\n\n  // Function to handle user input in cells\n// Function to handle user input in cells\n    function handleCellInput(event, row, col) {\n        const value = event.target.value;\n    \n        // Allow only numbers 1-9 or an empty string (for deletion)\n        if (/^[1-9]?$/.test(value)) {\n        const newGrid = [...grid];\n    \n        // Check if the cell is part of the original puzzle\n        if (originalPuzzle[row][col] === '') {\n            newGrid[row][col] = value;\n            setGrid(newGrid);\n        }\n        }\n    }\n    \n\n  // Function to handle loading a board from a text file\n    async function loadBoardFromFile(fileContent) {\n        const newGrid = createEmptyGrid();\n    \n        // Parse file content and update the grid\n        fileContent.split('\\n').forEach((line, rowIndex) => {\n        line.trim().split('').forEach((char, colIndex) => {\n            if (char !== '*') {\n            newGrid[rowIndex][colIndex] = char;\n            }\n        });\n        });\n        originalPuzzle = newGrid.map(row => [...row]);\n        setGrid(newGrid);\n    }\n  \n\n\n\n  // Function to handle difficulty selection\n  async function handleDifficulty(difficulty) {\n    // Load the board from the corresponding text file\n    try {\n        const jsonData = await import(`./${difficulty}.json`);\n        const fileContent = jsonData.text;\n        console.log(fileContent);\n        loadBoardFromFile(fileContent);\n\n    } catch (error) {\n        console.error('Error loading the board:', error);\n    }\n  }\n\n  // Inside your SudokuGrid component\nasync function handleSolve() {\n    try {\n      currentPuzzle = grid.map(row => [...row]);\n      const response = await fetch('http://localhost:3000/api/sudoku', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ board: grid }),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`HTTP error! Status: ${response.status}, Error: ${errorData.error}`);\n      }\n  \n      const data = await response.json();\n      console.log(data);\n      \n        \n      if (data === null) {\n        // Display an alert when the Sudoku board is unsolvable\n        setSolvable(false);\n        const newGrid = createEmptyGrid();\n        originalPuzzle = newGrid.map(row => [...row]);\n        setGrid(currentPuzzle);\n      } else {\n        const solvedGrid = data.solvedGrid;\n        setSolvable(true);\n        // Update the state with the solved grid received from the backend\n        setGrid(solvedGrid);\n              }\n    } catch (error) {\n      // Log other errors to the console\n      console.error('Error solving Sudoku:', error);\n          }\n  }\n  \n  function handleClear() {\n    const newGrid = createEmptyGrid();\n    originalPuzzle = newGrid.map(row => [...row]);\n    setGrid(newGrid);\n  }\n\n  function handleClosePopup() {\n    // Reset solvability state and error message when closing the popup\n    setSolvable(true);\n    handleClear();\n  }\n\n\n  // JSX for rendering the Sudoku grid\n// JSX for rendering the Sudoku grid\nreturn (\n    <div className=\"sudoku-container\">\n        <div className=\"sudoku-grid\">\n        {grid === null ? (\n          <>\n          <p>Cannot solve the Sudoku board. Please check your input.</p>\n          <button className=\"popup-button\" onClick={handleClosePopup}>\n          Close\n          </button>\n        </>\n        ) : (\n            <>\n              {grid.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"row\">\n                  {row.map((cell, colIndex) => (\n                    <input\n                      key={colIndex}\n                      type=\"text\"\n                      maxLength={1}\n                      className=\"cell\"\n                      value={cell}\n                      onChange={(event) => handleCellInput(event, rowIndex, colIndex)}\n                    />\n                  ))}\n                </div>\n              ))}\n              <div className=\"button-container\">\n                <button className=\"clear-button\" onClick={() => handleClear()}>\n                  Clear\n                </button>\n                <button className=\"difficulty-button easy\" onClick={() => handleDifficulty('easy')}>\n                  Easy\n                </button>\n                <button className=\"difficulty-button medium\" onClick={() => handleDifficulty('medium')}>\n                  Medium\n                </button>\n                <button className=\"difficulty-button hard\" onClick={() => handleDifficulty('hard')}>\n                  Hard\n                </button>\n                <button className=\"solve-button\" onClick={() => handleSolve()}>\n                  Solve\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n    }\n\n\n\nexport default SudokuGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}