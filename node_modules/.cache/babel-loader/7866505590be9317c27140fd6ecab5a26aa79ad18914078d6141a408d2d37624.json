{"ast":null,"code":"var _jsxFileName = \"/Users/Fiona/Desktop/sudoku/src/components/SudokuGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SudokuGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet originalPuzzle = [];\nconst SudokuGrid = () => {\n  _s();\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Function to create an empty Sudoku grid\n  function createEmptyGrid() {\n    return Array.from({\n      length: 9\n    }, () => Array(9).fill(''));\n  }\n\n  // Function to handle user input in cells\n  // Function to handle user input in cells\n  function handleCellInput(event, row, col) {\n    const value = event.target.value;\n\n    // Allow only numbers 1-9 or an empty string (for deletion)\n    if (/^[1-9]?$/.test(value)) {\n      const newGrid = [...grid];\n\n      // Check if the cell is part of the original puzzle\n      if (originalPuzzle[row][col] === '') {\n        newGrid[row][col] = value;\n        setGrid(newGrid);\n      }\n    }\n  }\n\n  // Function to handle loading a board from a text file\n  async function loadBoardFromFile(fileContent) {\n    const newGrid = createEmptyGrid();\n\n    // Parse file content and update the grid\n    fileContent.split('\\n').forEach((line, rowIndex) => {\n      line.trim().split('').forEach((char, colIndex) => {\n        if (char !== '*') {\n          newGrid[rowIndex][colIndex] = char;\n        }\n      });\n    });\n    originalPuzzle = newGrid.map(row => [...row]);\n    setGrid(newGrid);\n  }\n\n  // Function to handle difficulty selection\n  async function handleDifficulty(difficulty) {\n    // Load the board from the corresponding text file\n    try {\n      const jsonData = await import(`./${difficulty}.json`);\n      const fileContent = jsonData.text;\n      console.log(fileContent);\n      loadBoardFromFile(fileContent);\n    } catch (error) {\n      console.error('Error loading the board:', error);\n    }\n  }\n  async function handleSolve() {\n    try {\n      const response = await fetch('/api/sudoku', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          board: grid\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      const solvedGrid = data.solvedGrid;\n\n      // Update the state with the solved grid received from the backend\n      setGrid(solvedGrid);\n    } catch (error) {\n      console.error('Error solving Sudoku:', error);\n    }\n  }\n  function handleClear() {\n    const newGrid = createEmptyGrid();\n\n    // Copy the originalPuzzle to keep track of the original values\n    const updatedOriginalPuzzle = originalPuzzle.map(row => [...row]);\n\n    // Iterate over the entire grid\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        // Check if the cell is part of the original puzzle\n        if (updatedOriginalPuzzle[i][j] === '') {\n          newGrid[i][j] = '';\n        }\n      }\n    }\n\n    // Update the state with the cleared grid\n    setGrid(newGrid);\n  }\n\n  // JSX for rendering the Sudoku grid\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sudoku-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          maxLength: 1,\n          className: \"cell\",\n          value: cell,\n          onChange: event => handleCellInput(event, rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"clear-button\",\n        onClick: () => handleClear(),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"difficulty-button easy\",\n        onClick: () => handleDifficulty('easy'),\n        children: \"Easy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"difficulty-button medium\",\n        onClick: () => handleDifficulty('medium'),\n        children: \"Medium\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"solve-button\",\n        onClick: () => handleSolve(),\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(SudokuGrid, \"kvio6wSdBk5ukJFIGsSDwZiBCDg=\");\n_c = SudokuGrid;\nexport default SudokuGrid;\nvar _c;\n$RefreshReg$(_c, \"SudokuGrid\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","originalPuzzle","SudokuGrid","_s","grid","setGrid","createEmptyGrid","Array","from","length","fill","handleCellInput","event","row","col","value","target","test","newGrid","loadBoardFromFile","fileContent","split","forEach","line","rowIndex","trim","char","colIndex","map","handleDifficulty","difficulty","jsonData","text","console","log","error","handleSolve","response","fetch","method","headers","body","JSON","stringify","board","ok","Error","status","data","json","solvedGrid","handleClear","updatedOriginalPuzzle","i","j","className","children","cell","type","maxLength","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/Fiona/Desktop/sudoku/src/components/SudokuGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SudokuGrid.css';\n\n\nlet originalPuzzle = [];\nconst SudokuGrid = () => {\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Function to create an empty Sudoku grid\n  function createEmptyGrid() {\n    return Array.from({ length: 9 }, () => Array(9).fill(''));\n  }\n\n  // Function to handle user input in cells\n// Function to handle user input in cells\n    function handleCellInput(event, row, col) {\n        const value = event.target.value;\n    \n        // Allow only numbers 1-9 or an empty string (for deletion)\n        if (/^[1-9]?$/.test(value)) {\n        const newGrid = [...grid];\n    \n        // Check if the cell is part of the original puzzle\n        if (originalPuzzle[row][col] === '') {\n            newGrid[row][col] = value;\n            setGrid(newGrid);\n        }\n        }\n    }\n    \n\n  // Function to handle loading a board from a text file\n    async function loadBoardFromFile(fileContent) {\n        const newGrid = createEmptyGrid();\n    \n        // Parse file content and update the grid\n        fileContent.split('\\n').forEach((line, rowIndex) => {\n        line.trim().split('').forEach((char, colIndex) => {\n            if (char !== '*') {\n            newGrid[rowIndex][colIndex] = char;\n            }\n        });\n        });\n        originalPuzzle = newGrid.map(row => [...row]);\n        setGrid(newGrid);\n    }\n  \n\n\n\n  // Function to handle difficulty selection\n  async function handleDifficulty(difficulty) {\n    // Load the board from the corresponding text file\n    try {\n        const jsonData = await import(`./${difficulty}.json`);\n        const fileContent = jsonData.text;\n        console.log(fileContent);\n        loadBoardFromFile(fileContent);\n\n    } catch (error) {\n        console.error('Error loading the board:', error);\n    }\n  }\n\n  async function handleSolve() {\n    try {\n      const response = await fetch('/api/sudoku', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ board: grid }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const solvedGrid = data.solvedGrid;\n\n      // Update the state with the solved grid received from the backend\n      setGrid(solvedGrid);\n    } catch (error) {\n      console.error('Error solving Sudoku:', error);\n    }\n  }\n  function handleClear() {\n    const newGrid = createEmptyGrid();\n  \n    // Copy the originalPuzzle to keep track of the original values\n    const updatedOriginalPuzzle = originalPuzzle.map(row => [...row]);\n  \n    // Iterate over the entire grid\n    for (let i = 0; i < 9; i++) {\n      for (let j = 0; j < 9; j++) {\n        // Check if the cell is part of the original puzzle\n        if (updatedOriginalPuzzle[i][j] === '') {\n          newGrid[i][j] = '';\n        }\n      }\n    }\n  \n    // Update the state with the cleared grid\n    setGrid(newGrid);\n  }\n\n\n  // JSX for rendering the Sudoku grid\n  return (\n    <div className=\"sudoku-container\">\n      <div className=\"sudoku-grid\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <input\n                key={colIndex}\n                type=\"text\"\n                maxLength={1}\n                className=\"cell\"\n                value={cell}\n                onChange={(event) => handleCellInput(event, rowIndex, colIndex)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"button-container\">\n      <button className=\"clear-button\" onClick={() => handleClear()}>\n          Clear\n        </button>\n        <button className=\"difficulty-button easy\" onClick={() => handleDifficulty('easy')}>\n          Easy\n        </button>\n        <button className=\"difficulty-button medium\" onClick={() => handleDifficulty('medium')}>\n          Medium\n        </button>\n        <button className=\"solve-button\" onClick={() => handleSolve()}>\n          Solve\n        </button>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default SudokuGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}