{"ast":null,"code":"import React,{useState}from'react';import'./SudokuGrid.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";let originalPuzzle=[];const SudokuGrid=()=>{const[grid,setGrid]=useState(createEmptyGrid());// Function to create an empty Sudoku grid\nfunction createEmptyGrid(){return Array.from({length:9},()=>Array(9).fill(''));}// Function to handle user input in cells\n// Function to handle user input in cells\nfunction handleCellInput(event,row,col){const value=event.target.value;// Allow only numbers 1-9 or an empty string (for deletion)\nif(/^[1-9]?$/.test(value)){const newGrid=[...grid];// Check if the cell is part of the original puzzle\nif(originalPuzzle[row][col]===''){newGrid[row][col]=value;setGrid(newGrid);}}}// Function to handle loading a board from a text file\nasync function loadBoardFromFile(fileContent){const newGrid=createEmptyGrid();// Parse file content and update the grid\nfileContent.split('\\n').forEach((line,rowIndex)=>{line.trim().split('').forEach((char,colIndex)=>{if(char!=='*'){newGrid[rowIndex][colIndex]=char;}});});originalPuzzle=newGrid.map(row=>[...row]);setGrid(newGrid);}// Function to handle difficulty selection\nasync function handleDifficulty(difficulty){// Load the board from the corresponding text file\ntry{const jsonData=await import(\"./\".concat(difficulty,\".json\"));const fileContent=jsonData.text;console.log(fileContent);loadBoardFromFile(fileContent);}catch(error){console.error('Error loading the board:',error);}}async function handleSolve(){try{const response=await fetch('/api/sudoku',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({board:grid})});if(!response.ok){throw new Error(\"HTTP error! Status: \".concat(response.status));}const data=await response.json();const solvedGrid=data.solvedGrid;// Update the state with the solved grid received from the backend\nsetGrid(solvedGrid);}catch(error){console.error('Error solving Sudoku:',error);}}function handleClear(){setGrid(createEmptyGrid());}// JSX for rendering the Sudoku grid\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"sudoku-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sudoku-grid\",children:grid.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:row.map((cell,colIndex)=>/*#__PURE__*/_jsx(\"input\",{type:\"text\",maxLength:1,className:\"cell\",value:cell,onChange:event=>handleCellInput(event,rowIndex,colIndex)},colIndex))},rowIndex))}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"clear-button\",onClick:()=>handleClear(),children:\"Clear\"}),/*#__PURE__*/_jsx(\"button\",{className:\"difficulty-button easy\",onClick:()=>handleDifficulty('easy'),children:\"Easy\"}),/*#__PURE__*/_jsx(\"button\",{className:\"difficulty-button medium\",onClick:()=>handleDifficulty('medium'),children:\"Medium\"}),/*#__PURE__*/_jsx(\"button\",{className:\"difficulty-button hard\",onClick:()=>handleDifficulty('hard'),children:\"Hard\"}),/*#__PURE__*/_jsx(\"button\",{className:\"solve-button\",onClick:()=>handleSolve(),children:\"Solve\"})]})]});};export default SudokuGrid;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","originalPuzzle","SudokuGrid","grid","setGrid","createEmptyGrid","Array","from","length","fill","handleCellInput","event","row","col","value","target","test","newGrid","loadBoardFromFile","fileContent","split","forEach","line","rowIndex","trim","char","colIndex","map","handleDifficulty","difficulty","jsonData","concat","text","console","log","error","handleSolve","response","fetch","method","headers","body","JSON","stringify","board","ok","Error","status","data","json","solvedGrid","handleClear","className","children","cell","type","maxLength","onChange","onClick"],"sources":["/Users/Fiona/Desktop/sudoku/src/components/SudokuGrid.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SudokuGrid.css';\n\n\nlet originalPuzzle = [];\nconst SudokuGrid = () => {\n  const [grid, setGrid] = useState(createEmptyGrid());\n\n  // Function to create an empty Sudoku grid\n  function createEmptyGrid() {\n    return Array.from({ length: 9 }, () => Array(9).fill(''));\n  }\n\n  // Function to handle user input in cells\n// Function to handle user input in cells\n    function handleCellInput(event, row, col) {\n        const value = event.target.value;\n    \n        // Allow only numbers 1-9 or an empty string (for deletion)\n        if (/^[1-9]?$/.test(value)) {\n        const newGrid = [...grid];\n    \n        // Check if the cell is part of the original puzzle\n        if (originalPuzzle[row][col] === '') {\n            newGrid[row][col] = value;\n            setGrid(newGrid);\n        }\n        }\n    }\n    \n\n  // Function to handle loading a board from a text file\n    async function loadBoardFromFile(fileContent) {\n        const newGrid = createEmptyGrid();\n    \n        // Parse file content and update the grid\n        fileContent.split('\\n').forEach((line, rowIndex) => {\n        line.trim().split('').forEach((char, colIndex) => {\n            if (char !== '*') {\n            newGrid[rowIndex][colIndex] = char;\n            }\n        });\n        });\n        originalPuzzle = newGrid.map(row => [...row]);\n        setGrid(newGrid);\n    }\n  \n\n\n\n  // Function to handle difficulty selection\n  async function handleDifficulty(difficulty) {\n    // Load the board from the corresponding text file\n    try {\n        const jsonData = await import(`./${difficulty}.json`);\n        const fileContent = jsonData.text;\n        console.log(fileContent);\n        loadBoardFromFile(fileContent);\n\n    } catch (error) {\n        console.error('Error loading the board:', error);\n    }\n  }\n\n  async function handleSolve() {\n    try {\n      const response = await fetch('/api/sudoku', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ board: grid }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const solvedGrid = data.solvedGrid;\n\n      // Update the state with the solved grid received from the backend\n      setGrid(solvedGrid);\n    } catch (error) {\n      console.error('Error solving Sudoku:', error);\n    }\n  }\n  function handleClear() {\n    setGrid(createEmptyGrid());\n  }\n\n\n  // JSX for rendering the Sudoku grid\n  return (\n    <div className=\"sudoku-container\">\n      <div className=\"sudoku-grid\">\n        {grid.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <input\n                key={colIndex}\n                type=\"text\"\n                maxLength={1}\n                className=\"cell\"\n                value={cell}\n                onChange={(event) => handleCellInput(event, rowIndex, colIndex)}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"button-container\">\n        <button className=\"clear-button\" onClick={() => handleClear()}>\n          Clear\n        </button>\n        <button className=\"difficulty-button easy\" onClick={() => handleDifficulty('easy')}>\n          Easy\n        </button>\n        <button className=\"difficulty-button medium\" onClick={() => handleDifficulty('medium')}>\n          Medium\n        </button>\n        <button className=\"difficulty-button hard\" onClick={() => handleDifficulty('hard')}>\n          Hard\n        </button>\n        <button className=\"solve-button\" onClick={() => handleSolve()}>\n          Solve\n        </button>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default SudokuGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}